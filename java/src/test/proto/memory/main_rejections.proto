/*
 * Copyright 2024, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package memory;

// This file is for testing processing of a bigger Java file.
// It is based a similar proto code from McJava which caused a memory issue.

option java_package = "memory";

// Produce one big Java file.
option java_multiple_files = false;

// Do not specify java_outer_classname option as we're not generating multiple
// Java classes for rejections.

import "google/protobuf/any.proto";

message Rejection1Dep {
    string id = 1;
}

enum Rejection2DepEnum {
    OK = 0;
}

message Rejection1 {
    Rejection1Dep id = 1;
}

message Rejection2 {
    Rejection2DepEnum id = 1;
}

message Rejection3 {
    Rejection3Inner innerMessage = 2;

    message Rejection3Inner {
        string id = 1;
    }
}

message Rejection4 {
    string id = 1;
    google.protobuf.Any any_id = 2;
    bool boolean_id = 3;
    Rejection4Inner inner_id = 4;
    Rejection4InnerEnum inner_enum_id = 5;

    message Rejection4Inner {
        string id = 1;
    }

    enum Rejection4InnerEnum {
        OK = 0;
    }
}

message RejectionWithRepeatedField {
    repeated int32 values = 1;
}

message RejectionWithMapField {
    map<int32, int32> map = 1;
}
