/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.protodata;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.protodata";
option java_outer_classname = "AstProto";
option java_multiple_files = true;

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

// A path in a file system.
message FilePath {

    // The relative path from the Protobuf source directory to a file.
    //
    // The Protobuf compiler only works with the Unix-style file separators (`/`), regardless of
    // the operating system. This value holds this exact format of the path.
    //
    string value = 1;
}

// A Protobuf source file.
message File {

    // Path to the file in a file system.
    FilePath path = 1;

    // Name of the Protobuf package to which the declarations of the file belong.
    string package_name = 2;

    // The version of the Protobuf syntax.
    SyntaxVersion syntax = 3;

    // File-level options.
    repeated Option option = 4;

    // The version of the Protobuf syntax, as defined in a Protobuf source file.
    //
    enum SyntaxVersion {

        SV_UNDEFINED = 0;

        PROTO2 = 1;

        PROTO3 = 2;
    }
}

// Name of a Protobuf type.
//
// Applicable to message and enum types.
//
message TypeName {

    // The short name of the type.
    string simple_name = 1;

    // Names of the types nesting this type declaration.
    //
    // For example, consider message `Fuzzy`:
    // ```
    // message Project {
    //     message Deadline {
    //         message Fuzzy {}
    //     }
    // }
    // ```
    // `Fuzzy` is the `simple_name` of this type. And [`Project`, `Deadline`] are the nesting type
    // names.
    //
    repeated string nesting_type_name = 2;

    // The name of the package.
    string package_name = 3;

    // The prefix of the type's URL.
    //
    // A type URL has the following structure: "<type URL prefix>/<package>.<short name>". For more
    // info, see the definition of `google.protobuf.Any.type_url`.
    //
    // Must not include a training slash ("/").
    //
    string type_url_prefix = 4;
}

// A Protobuf message type.
message MessageType {

    TypeName name = 1;

    // The fields of this type.
    //
    // Does not include the fields belonging to a field group.
    //
    repeated Field field = 2;

    // The field groups defined in this type.
    repeated OneofGroup oneof_group = 3;

    // Message-level options.
    repeated Option option = 4;

    // Path to the file which declares this type.
    FilePath file = 5;

    // Name of the message type which hosts the declaration of this type.
    TypeName declared_in = 6;

    // Message type declarations nested inside this type.
    repeated TypeName nested_messages = 7;

    // Enum type declarations nested inside this type.
    repeated TypeName nested_enums = 8;

    // Documentation of this type.
    Doc doc = 9;
}

// A Protobuf enum type.
message EnumType {

    TypeName name = 1;

    // Message-level options.
    repeated Option option = 2;

    // Path to the file which declares this type.
    FilePath file = 3;

    repeated EnumConstant constant = 4;

    // Name of the message type which hosts the declaration of this type.
    TypeName declared_in = 5;

    // Documentation of this type.
    Doc doc = 6;
}

// A name of an enum constant.
message ConstantName {

    string value = 1;
}

// An enum constant, a.k.a. an enum value.
message EnumConstant {

    ConstantName name = 1;

    // The number associated with the constant.
    //
    // The numbers always start with a zero.
    //
    // If the enum permits aliases, there can be multiple constants with the same number.
    //
    uint32 number = 2;

    // The name of the enum type which declares this constant.
    TypeName declared_in = 3;

    // The index of the constant within the enum.
    //
    // Not to be confused with the enum constant `number`.
    //
    uint32 order_of_declaration = 5;

    // Options associated with this constant.
    repeated Option option = 6;

    // Documentation of this constant.
    Doc doc = 7;
}

// A primitive Protobuf type.
enum PrimitiveType {

    PT_UNKNOWN = 0;

    TYPE_DOUBLE = 1;
    TYPE_FLOAT = 2;
    TYPE_INT64 = 3;
    TYPE_UINT64 = 4;
    TYPE_INT32 = 5;
    TYPE_FIXED64 = 6;
    TYPE_FIXED32 = 7;
    TYPE_BOOL = 8;
    TYPE_STRING = 9;
    TYPE_BYTES = 10;
    TYPE_UINT32 = 11;
    TYPE_SFIXED32 = 12;
    TYPE_SFIXED64 = 13;
    TYPE_SINT32 = 14;
    TYPE_SINT64 = 15;
}

// A Protobuf type.
message Type {

    oneof kind {

        TypeName message = 1;

        TypeName enumeration = 2;

        PrimitiveType primitive = 3;
    }
}

// A name of a field in a message.
message FieldName {

    // Short name of the field.
    string value = 1;
}

// A Protobuf message field.
message Field {

    FieldName name = 1;

    // The type of the field.
    Type type = 2;

    // The type in which the field is declared.
    TypeName declaring_type = 3;

    // The field number.
    //
    // Not to be confused with the field's order to declaration.
    //
    // For example, in a message:
    // ```
    // message Foo {
    //     string bar = 2;
    //     int32 baz = 1;
    // }
    // ```
    // Field `bar` has the number 2 and the field `baz` has the number 1.
    //
    uint32 number = 4;

    // The index of the field within the message.
    //
    // Not to be confused with the field number.
    //
    // For example, in a message:
    // ```
    // message Foo {
    //     string bar = 2;
    //     int32 baz = 1;
    // }
    // ```
    // Field `bar` has the order 0 and the field `baz` has the order 1.
    //
    uint32 order_of_declaration = 5;

    oneof cardinality {

        // The flag telling if the field holds just a single value.
        //
        // See also: `list`, `map`.
        //
        google.protobuf.Empty single = 6;

        // The flag telling if the field is a list.
        //
        // A list is any `repeated` field which is not a `map`.
        //
        google.protobuf.Empty list = 7;

        // The details of this map field type.
        //
        // Only set if this field is a map.
        //
        OfMap map = 8;

        // If this field is declared in a field group, the name of the group.
        //
        // Otherwise, must be empty.
        //
        // `repeated` and `map` fields cannot be a part of a `oneof`.
        //
        OneofName oneof_name = 9;
    }

    // Field-level options.
    repeated Option option = 10;

    // Documentation of this field.
    Doc doc = 11;

    // Additional type details for map fields.
    message OfMap {

        // The type of the key in the map.
        //
        // The type of the value is reflected in `Field.type`.
        //
        PrimitiveType key_type = 1;
    }
}

// Name of a group of fields.
message OneofName {

    // Name of the `oneof` block.
    string value = 1;
}

// Group is a set of fields declared within one `oneof` block.
message OneofGroup {

    OneofName name = 1;

    // Fields declared in this group.
    repeated Field field = 2;

    // Oneof-level options.
    repeated Option option = 3;

    // Documentation of this group.
    Doc doc = 4;
}

// A name of a Protobuf service type.
message ServiceName {

    // The short name of the service type.
    string simple_name = 1;

    // The name of the package.
    string package_name = 2;

    // The prefix of the type's URL.
    //
    // A type URL has the following structure: "<type URL prefix>/<package>.<short name>". For more
    // info, see the definition of `google.protobuf.Any.type_url`.
    //
    // Must not include a training slash ("/").
    //
    string type_url_prefix = 3;
}

// A Protobuf service type.
message Service {

    ServiceName name = 1;

    // The remote procedure call methods exposed by this service.
    repeated Rpc rpc = 2;

    // Service-level options.
    repeated Option option = 3;

    // Documentation of this service.
    Doc doc = 4;
}

// A name of an RPC method.
message RpcName {

    string value = 1;
}

// A remote procedure call method defined in a Protobuf service.
message Rpc {

    RpcName name = 1;

    // The kind of call.
    //
    // A call may accept one request or a stream of requests and produce one response or a stream of
    // responses.
    //
    CallCardinality cardinality = 2;

    // The type of the request messages.
    TypeName request_type = 3;

    // The type of the response messages.
    TypeName response_type = 4;

    // `rpc`-level options.
    repeated Option option = 5;

    // Documentation of this `rpc`.
    Doc doc = 6;

    // The service declaring this method.
    ServiceName service = 7;
}

// The kind of exchange between a client and a server in a single `rpc` call.
enum CallCardinality {

    // The client sends a single request to the server and gets a single response back.
    UNARY = 0;

    // The client sends a single request to the server and receives a stream of responses.
    SERVER_STREAMING = 1;

    // The client sends a stream of requests to the server and receives a single response.
    CLIENT_STREAMING = 2;

    // The client sends a stream of requests to the server and receives a stream of responses.
    BIDIRECTIONAL_STREAMING = 3;
}

// A Protobuf option.
//
// An option may be declared for a whole file, a type (message, enum, or service), for
// a message field, a standalone `rpc`, or an enum value.
//
message Option {

    // Name of the option.
    string name = 1;

    // The field number of the option.
    //
    // Custom options are defined as extensions to the standard option types and must have distinct
    // field numbers.
    //
    uint32 number = 2;

    // The type of the option.
    //
    // An option can have a primitive or a message type, but cannot be repeated of a map.
    //
    Type type = 3;

    // The packed value of the option.
    google.protobuf.Any value = 4;
}

// Documentation associated with a certain Protobuf declaration.
message Doc {

    // The comment placed directly above the declaration without any empty lines.
    //
    // For example, this very doc is the leading comment of the `leading_comment` field.
    //
    string leading_comment = 1;

    // The comment placed beneath above the declaration without any empty lines.
    string trailing_comment = 2;

    // Comments placed above the declaration separated by at least one empty line from
    // the declaration.
    //
    // This can often be a general comment, related not to the declaration itself, but rather to
    // its context.
    //
    repeated string detached_comment = 3;
}
