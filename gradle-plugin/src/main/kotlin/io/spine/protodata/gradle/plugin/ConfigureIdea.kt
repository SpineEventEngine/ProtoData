/*
 * Copyright 2025, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package io.spine.protodata.gradle.plugin

import com.google.protobuf.gradle.GenerateProtoTask
import io.spine.protodata.gradle.builtins
import io.spine.protodata.gradle.debug
import io.spine.protodata.gradle.plugins
import io.spine.protodata.gradle.generatedDir
import io.spine.tools.gradle.protobuf.generatedSourceProtoDir
import java.io.File
import java.nio.file.Path
import java.nio.file.Paths
import kotlin.io.path.Path
import org.gradle.api.Project
import org.gradle.api.tasks.TaskCollection
import org.gradle.kotlin.dsl.getByType
import org.gradle.plugins.ide.idea.model.IdeaModel
import org.gradle.plugins.ide.idea.model.IdeaModule

/**
 * Ensures that the sources generated by Protobuf Gradle plugin are
 * not included in the IDEA project.
 *
 * IDEA should only see the sources generated by ProtoData as
 * we define in [GenerateProtoTask.configureSourceSetDirs].
 */
internal fun Project.configureIdea() {
    afterEvaluate {
        pluginManager.withPlugin("idea") {
            val idea = extensions.getByType<IdeaModel>()
            idea.module.setupDirectories(this)
        }
    }
}

/**
 * Configures directory settings in this [IdeaModule] in the following way:
 *
 * 1. Marks directories under `build/generated/source/proto` as excluded.
 * 2. Filters these directories from being viewed as [sourceDirs][IdeaModule.sourceDirs].
 * 3. Marks directories under [Project.generatedDir] as those with generated sources.
 * 4. Marks `extracted-include-protos`, `extracted-protos`, and their children as excluded.
 */
private fun IdeaModule.setupDirectories(project: Project) {
    val protocOutputDir = project.protocOutputDir
    val protocTargets = project.protocTargets()
    excludeWithNested(protocOutputDir.toPath(), protocTargets)
    excludeFromGeneratedSourceDirs()
    sourceDirs = sourceDirs.excluding(protocOutputDir)
    testSources.filter { !it.residesIn(protocOutputDir) }
    setGeneratedSourceDirs(protocTargets)
    excludeExtractedDirs(project)
}

/**
 * Obtains the root directory into which Protobuf Gradle Plugin assigns the `protoc` output.
 *
 * This is an alias for [io.spine.tools.gradle.protobuf.generatedSourceProtoDir] which
 * also returns [File] instead of [Path].
 */
private val Project.protocOutputDir: File
    get() = generatedSourceProtoDir.toFile()

/**
 * Traverses [generatedSourceDirs][IdeaModule.generatedSourceDirs] excluding those
 * belonging to `protoc` output directory.
 */
private fun IdeaModule.excludeFromGeneratedSourceDirs() {
    val protocOutputDir = project.protocOutputDir
    generatedSourceDirs.forEach {
        if (it.residesIn(protocOutputDir)) {
            excludeDirs.add(it)
            project.logger.debug {
                "Added `$it` to excluded directories in the IDEA module `$name`."
            }
        }
    }
}

/**
 * Configures [generatedSourceDirs][IdeaModule.generatedSourceDirs] not to have
 * the directories under `protoc` output root, and to have ProtoData target directories.
 */
private fun IdeaModule.setGeneratedSourceDirs(protocTargets: List<Path>) {
    val project = project
    val protocOutputDir = project.protocOutputDir
    val protoDataTargets = project.generatedDir.resolve(protocTargets)
        .map { it.toFile() }.toSet()
    generatedSourceDirs =
        generatedSourceDirs.filter { !it.residesIn(protocOutputDir) }.toSet() + protoDataTargets
}

/**
 * Marks the directories `extracted-include-protos` and `extracted-protos` and their
 * subdirectories as excluded in this [IdeaModule].
 */
private fun IdeaModule.excludeExtractedDirs(project: Project) {
    val sourceSetDirs = project.generateProtoTasks().map { Path(it.sourceSet.name) }
    val buildDir = project.layout.buildDirectory.get().asFile
    val extractedIncludeProtos = buildDir.resolve("extracted-include-protos").toPath()
    val extractedProtos = buildDir.resolve("extracted-protos").toPath()

    excludeWithNested(extractedIncludeProtos, sourceSetDirs)
    excludeWithNested(extractedProtos, sourceSetDirs)
}

/**
 * Excludes the given directory and its subdirectories from
 * being seen as ones with the source code.
 */
private fun IdeaModule.excludeWithNested(directory: Path, subdirs: Iterable<Path>) {
    excludeDirs.add(directory.toFile())
    directory.resolve(subdirs).forEach {
        excludeDirs.add(it.toFile())
    }
}

/**
 * Lists target directories for Protobuf code generation.
 *
 * The directory names are in the following format:
 *
 * `<source-set-name>/<builtIn-or-plugin-name>`
 */
internal fun Project.protocTargets(): List<Path> {
    val codegenTargets = mutableListOf<Path>()
    val protobufTasks = generateProtoTasks()
    protobufTasks.forEach { task ->
        val sourceSet = task.sourceSet.name
        val builtins = task.builtins()
        val plugins = task.plugins()
        val combined = builtins + plugins
        combined.forEach { subdir ->
            codegenTargets.add(Paths.get(sourceSet, subdir))
        }
    }
    return codegenTargets
}

private fun Project.generateProtoTasks(): TaskCollection<GenerateProtoTask> =
    tasks.withType(GenerateProtoTask::class.java)
