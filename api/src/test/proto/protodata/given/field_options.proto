/*
 * Copyright 2024, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.protodata.given;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.protodata.given.value";
option java_outer_classname = "FieldOptionsProto";
option java_multiple_files = true;

// The message with integer option values.
message DiceRoll {
    int32 result = 1 [(min).value = "1", (max).value = "6"];
}

// The message type which uses `(min)` option with the floating point value.
message KelvinTemperature {
     double value = 1 [(min) = {
         value: "0.0",
         exclusive: true,
         error_msg: "Temperature cannot reach {other}K, but provided {value}."
     }];
 }

// A range of integer values.
//
// The range is empty if `min_value == max_value`.
// The option here references the field in the same type.
//
message Range {
    int32 min_value = 1 [(max).value = "max_value"];
    int32 max_value = 2;
}

// A [number] was generated within the requested [range].
//
// The options here reference nested fields.
//
message NumberGenerated {
    int32 number = 1 [(min).value = "range.min_value", (max).value = "range.max_value"];
    Range range = 2 [(required) = true];
}

//
// Types with negative cases
//

// The cases of wrong field references.
message Misreferences {

    // Here the option references the field which is not declared in this message type.
    int32 wrongDirect = 1 [(min).value = "missing"];

    // Here the option references the missing nested field.
    int32 wrongIndirect = 2 [(max).value = "range.top"];

    // The field for checking nested paths.
    Range range = 10 [(required) = true];
}

// See https://protobuf.dev/programming-guides/proto3/#scalar
message IntBucket {
    int32 int32_value = 1;
    int64 int64_value = 2;

    uint32 uint32_value = 3;
    uint64 uint64_value = 4;

    sint32 sing32_value = 5;
    sint64 sint64_value = 6;

    fixed32 fixed32_value = 7;
    fixed64 fixed64_value = 8;

    sfixed32 sfixed32_value = 9;
    sfixed64 sfixed64_value = 10;
}
