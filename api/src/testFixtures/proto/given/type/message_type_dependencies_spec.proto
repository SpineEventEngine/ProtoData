/*
 * Copyright 2024, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package given.type;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.test.type";
option java_outer_classname = "MessageTypeDependenciesSpecProto";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";

// A message type with multi-level nested `Message`-typed fields structure.
message Magazine {
    MagazineTitle name = 1;
    MagazineNumber number = 2;
}

message MagazineTitle {
    string value = 1;
}

message MagazineNumber {
    Volume volume = 1;
    Issue issue = 2;
    google.protobuf.Timestamp when_issued = 3;
}

message Volume {
    int32 value = 1;
}

message Issue {
    int32 value = 1;
}

// A message type with multiple name duplications between distinct field types.
message MagazineCover {

    Headline headline = 1;
    Photo photo = 2;
    Article.Headline highlighted_article = 3;
    Url where_to_find_online = 4;

    message Headline {
        string text = 1;
    }

    message Url {
        string value = 1;
    }
}

message Photo {
    string url = 1;
}

// A message type which has multiple fields of the same type.
message Article {
    Headline primary_headline = 1;
    Headline secondary_headline = 2;
    ArticleText text = 3;

    message Headline {
        string text = 1;
    }
}

message ArticleText {
    string value = 1;
}

// A message type which contains a circular field reference.
message Author {
    AuthorName name = 1;
    Author favorite_author = 2;
}

message AuthorName {
    string alias = 1;
}

// The stub message with recursive type definitions using in the nested types.
message Jungle {

    repeated Gorilla gorilla = 1;

    message Gorilla {
        BananaTree.Banana food = 1;
    }

    message BananaTree {

        repeated Banana product = 1;

        message Banana {
            BananaTree parent = 1;
        }

        Jungle motherland = 2;
    }
}

// A stub message which has message types used in fields in various scenarios.
message OopFun {
    // Single message type field.
    Jungle jungle = 1;

    // A `repeated` message with message type.
    repeated Jungle.BananaTree tree = 2;

    // A message type used as values 
    map<string, Jungle.Gorilla> gorillas = 3;
}
