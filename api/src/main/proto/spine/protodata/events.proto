 /*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.protodata;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.protodata.event";
option java_outer_classname = "EventsProto";
option java_multiple_files = true;

import "spine/protodata/ast.proto";
import "spine/protodata/source.proto";

// Emitted when processing of a file begins.
message FileEntered {

    FilePath path = 1;

    File file = 2;
}

// Emitted when a file-level option is found.
message FileOptionDiscovered {

    FilePath file = 1;

    Option option = 2;
}

// Emitted when a file is completely discovered, including all the types, etc.
message FileExited {

    FilePath file = 1;
}

// Emitted when processing reaches a message type.
message TypeEntered {

    FilePath file = 1;

    MessageType type = 2;
}

// Emitted when a message-level option is found.
message TypeOptionDiscovered {

    FilePath file = 1;

    TypeName type = 2;

    Option option = 3;
}

// Emitted when a message type is completely discovered, including all the fields, etc.
message TypeExited {

    FilePath file = 1;

    TypeName type = 2;
}

// Emitted when processing reaches a `oneof` group.
message OneofGroupEntered {

    FilePath file = 1;

    TypeName type = 2;

    OneofGroup group = 3;
}

// Emitted when a `oneof`-level option is found.
message OneofOptionDiscovered {

    FilePath file = 1;

    TypeName type = 2;

    OneofName group = 3;

    Option option = 4;
}

// Emitted when a `oneof`-group is completely discovered, including all the options and fields.
message OneofGroupExited {

    FilePath file = 1;

    TypeName type = 2;

    OneofName group = 3;
}

// Emitted when processing reaches a field.
message FieldEntered {

    FilePath file = 1;

    TypeName type = 2;

    Field field = 3;
}

// Emitted when a field-level option is found.
message FieldOptionDiscovered {

    FilePath file = 1;

    TypeName type = 2;

    FieldName field = 3;

    Option option = 4;
}

// Emitted when a field is completely discovered including the options.
message FieldExited {

    FilePath file = 1;

    TypeName type = 2;

    FieldName field = 3;
}

// Emitted when processing reaches an enum type.
message EnumEntered {

    FilePath file = 1;

    EnumType type = 2;
}

// Emitted when an enum-level option is found.
message EnumOptionDiscovered {

    FilePath file = 1;

    TypeName type = 2;

    Option option = 3;
}

// Emitted when processing reaches an enum constant a.k.a. enum value.
message EnumConstantEntered {

    FilePath file = 1;

    TypeName type = 2;

    EnumConstant constant = 3;
}

// Emitted when an enum constant-level option is found.
message EnumConstantOptionDiscovered {

    FilePath file = 1;

    TypeName type = 2;

    ConstantName constant = 3;

    Option option = 4;
}

// Emitted when an enum constant is completely discovered.
message EnumConstantExited {

    FilePath file = 1;

    TypeName type = 2;

    ConstantName constant = 3;
}

// Emitted when an enum type is completely discovered, including all the constants, etc.
message EnumExited {

    FilePath file = 1;

    TypeName type = 2;
}

// Emitted when the processing reaches a service.
message ServiceEntered {

    FilePath file = 1;

    Service service = 2;
}

// Emitted when an service-level option is found.
message ServiceOptionDiscovered {

    FilePath file = 1;

    ServiceName service = 2;

    Option option = 3;
}

// Emitted when a service is completely discovered, including all the option and RPCs.
message ServiceExited {

    FilePath file = 1;

    ServiceName service = 2;
}

// Emitted when the processing reaches a remote procedure call.
message RpcEntered {

    FilePath file = 1;

    ServiceName service = 2;

    Rpc rpc = 3;
}

// Emitted when an RPC-level option is found.
message RpcOptionDiscovered {

    FilePath file = 1;

    ServiceName service = 2;

    RpcName rpc = 3;

    Option option = 4;
}

// Emitted when an RPC is completely discovered.
message RpcExited {

    FilePath file = 1;

    ServiceName service = 2;

    RpcName rpc = 3;
}

// Emitted when the Protobuf compiler discovers a dependency file.
//
// The order of files reported by events of this type is unspecified. Users should not rely on any
// particular order.
//
// Each file is only reported by one event, even if the file is imported into
//
// `DependencyDiscovered` events always precede all other Protobuf compiler events, i.e.
// the first `FileEntered` will always be emitted after the last `DependencyDiscovered`.
//
// Normally, no code should be generated for dependencies. However, they can be used for additional
// info when generating code for the module's own types.
//
message DependencyDiscovered {

    FilePath path = 1;

    ProtobufSourceFile file = 2;
}

// Emitted when an insertion point printer adds an insertion point to a code file.
message InsertionPointPrinted {

    // Path to the code file.
    //
    // This path is relative to the source file set which contains the file.
    //
    FilePath file = 1;

    // The insertion point label.
    //
    // This is a unique text that allows ProtoData to find insertion points in the text later.
    //
    string label = 2 [(required) = true];

    // The appearance of the insertion point in the code.
    //
    // This is typically a comment which contains the insertion point label and possibly some other
    // syntax. New code can be inserted right after this substring in the code file.
    //
    string representation_in_code = 3 [(required) = true];
}
