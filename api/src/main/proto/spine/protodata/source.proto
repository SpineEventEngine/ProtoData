/*
 * Copyright 2023, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.protodata;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.protodata";
option java_outer_classname = "ProtobufSourceProto";
option java_multiple_files = true;

import "spine/protodata/ast.proto";

// A view of a complete source file.
//
// Includes all the message types declared in the file, along with their fields.
//
message ProtobufSourceFile {
    option (entity).kind = VIEW;

    // The relative path to the file.
    //
    // Must be the same as `header.file`.
    //
    File file = 1;

    // A header of the Protobuf file.
    ProtoFileHeader header = 2;

    // All the message types in this source files.
    //
    // The keys are the type URLs of the message types.
    //
    // This map includes both top-level and nested definitions.
    //
    map<string, MessageType> type = 3;

    // All the enum types in this source files.
    //
    // The keys are the type URLs of the enum types.
    //
    // This map includes both top-level and nested definitions.
    //
    map<string, EnumType> enum_type = 4;

    // All the services declared in this source files.
    //
    // The keys are the type URLs of the services.
    //
    map<string, Service> service = 5;
}

// A Protobuf definitions file which is included into the module as a dependency.
//
// Unlike `ProtobufSourceFile`, `ProtobufDependency` should not result in any code generation.
// Rather, it serves an informative purpose.
//
message ProtobufDependency {
    option (entity).kind = VIEW;

    // The relative path to the dependency.
    //
    // This is the same path as the one used when the dependency is used in an import statement.
    //
    // Must be the same as `file.file_path`.
    //
    File file = 1;

    ProtobufSourceFile source = 2;
}
