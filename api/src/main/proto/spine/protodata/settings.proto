/*
 * Copyright 2024, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.protodata;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.protodata.settings";
option java_outer_classname = "SettingsProto";
option java_multiple_files = true;

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/descriptor.proto";
import "spine/protodata/file.proto";

// A view on the ProtoData user configuration.
//
// Describes parameters passed to a component of the code generation process.
// The user may then obtain those parameters by finding the instance of this view.
//
// @see io.spine.protodata.settings.LoadsSettings
//
message Settings {
    option (entity).kind = VIEW;

    // A name of a ProtoData component which is going to consume the settings.
    string consumer = 1;

    oneof kind {
        option (is_required) = true;

        // No settings are supplied.
        google.protobuf.Empty empty = 2;

        // A file which contains the configuration.
        //
        // The format of the configuration is inferred from the file extension.
        //
        File file = 3;
    }
}

extend google.protobuf.EnumValueOptions {

    // Possible file extensions associated with a file format.
    //
    // Only applicable to the `Format` enum.
    //
    repeated string extension = 73980 [(internal) = true];
}

// The format of a Protobuf message stored in a file.
//
// Files with settings for ProtoData and its plugins should be stored in one of these formats.
//
enum Format {

    RCF_UNKNOWN = 0;

    // A Protobuf message encoded in binary.
    //
    // See: https://protobuf.dev/programming-guides/techniques/#suffixes
    // See: https://buf.build/docs/reference/inputs#binpb
    //
    PROTO_BINARY = 1 [(extension) = "binpb", (extension) = "pb", (extension) = "bin"];

    // A Protobuf message encoded in Protobuf JSON.
    //
    // Use this item instead of [JSON] for Protobuf messages stored in
    // JSON format so that the correct parser is selected for the file.
    //
    PROTO_JSON = 2 [(extension) = "pb.json"];

    // A plain JSON value.
    JSON = 3 [(extension) = "json"];

    // A plain YAML value.
    YAML = 4 [(extension) = "yml", (extension) = "yaml"];

    // A plain string value.
    PLAIN = 5 [(extension) = "txt"];
}

// A list of code generation actions associated with the parameters passed to these actions.
//
// Some code generation scenarios may be solved by applying combination of render actions.
// For example, we want to make messages declared in proto files named `command.proto`
// implement the `CommandMessage` interface, and messages declared in files named `event.proto`
// implement the `EventMessage` interface. Implementation will involve the following steps:
//
//  1) Create a render action called `ImplementInterface`. The action would accept the name
//     of the interface as the parameter.
//  2) Create Protobuf type for settings that would match a file pattern with the action and
//     the corresponding parameter with the name of the interface.
//  3) Create a ProtoData plugin with a renderer which would load the settings and
//     run corresponding actions.
//
// This type addresses the need #2 above, for having parametrised rendering actions in settings
// passed to ProtoData plugins.
//
// @see io.spine.protodata.renderer.RenderAction
//
message Actions {

    // Maps a fully-qualified name of a render action class to a parameter
    // passed to the action.
    //
    // The type of the parameter wrapped into `Any` must match the type of
    // the parameter accepted by the action. Otherwise, a runtime error will occur.
    //
    // If the action does not accept a parameter, the map entry value may contain
    // either a default instance of `Any` or wrapped instance of `Empty`.
    //
    map<string, google.protobuf.Any> map = 1 [(required) = true];
}
